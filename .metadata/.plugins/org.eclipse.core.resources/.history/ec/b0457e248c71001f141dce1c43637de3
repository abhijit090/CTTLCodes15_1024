
# from flask import Flask, render_template, request
# import importlib
# import os
#
# app = Flask(__name__, template_folder='Template')
#
# @app.route('/')
# def index():
#     return render_template('index2.html')
#
# @app.route('/automation', methods=['POST'])
# def run_automation():
#     if request.method == 'POST':
#         search_key = request.form.get('script_name')
#         if not search_key:
#             return 'No script name provided', 400
#
#         # Validate the search_key to ensure it's a safe script name
#         if not search_key.isidentifier():
#             return 'Invalid script name', 400
#
#         # Construct the module name and function name
#         module_name = f'scripts.{search_key}'
#         func_name = f'selenium_code_{search_key}'
#
#         try:
#             # Dynamically import the module
#             script_module = importlib.import_module(module_name)
#
#             # Check if the function exists and call it
#             if hasattr(script_module, func_name):
#                 func = getattr(script_module, func_name)
#                 result = func()
#             else:
#                 result = 'Function not found in script'
#
#         except ModuleNotFoundError:
#             result = 'Script not found'
#         except Exception as e:
#             result = f'An error occurred: {str(e)}'
#
#         # Returning result as plain text
#         return result
#
#     return 'Method not allowed', 405
#
# if __name__ == '__main__':
#     app.run(debug=True)

# from flask import Flask, render_template, request
# import importlib
# import os
# import sys
#
# # Handle different environments (PyInstaller bundle or normal)
# if getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS'):
#     # If running as a PyInstaller bundle, use _MEIPASS to locate templates and static folders
#     template_dir = os.path.join(sys._MEIPASS, 'templates')
#     static_dir = os.path.join(sys._MEIPASS, 'static')
#     app = Flask(__name__, template_folder=template_dir, static_folder=static_dir)
# else:
#     # Normal environment, default template and static folder
#     app = Flask(__name__, template_folder='Template')
#
# @app.route('/')
# def index():
#     return render_template('index2.html')
#
# @app.route('/automation', methods=['POST'])
# def run_automation():
#     if request.method == 'POST':
#         search_key = request.form.get('script_name')
#         if not search_key:
#             return 'No script name provided', 400
#
#         # Validate the search_key to ensure it's a safe script name
#         if not search_key.isidentifier():
#             return 'Invalid script name', 400
#
#         # Construct the module name and function name
#         module_name = f'scripts.{search_key}'
#         func_name = f'selenium_code_{search_key}'
#
#         try:
#             # Dynamically import the module
#             script_module = importlib.import_module(module_name)
#
#             # Check if the function exists and call it
#             if hasattr(script_module, func_name):
#                 func = getattr(script_module, func_name)
#                 result = func()
#             else:
#                 result = 'Function not found in script'
#
#         except ModuleNotFoundError:
#             result = 'Script not found'
#         except Exception as e:
#             result = f'An error occurred: {str(e)}'
#
#         # Returning result as plain text
#         return result
#
#     return 'Method not allowed', 405
#
# if __name__ == '__main__':
#     # app.run(debug=True)
#      app.run(host='0.0.0.0', port=5000, debug=True)






from flask import Flask, render_template, request
import importlib
import os
import sys

# Handle different environments (PyInstaller bundle or normal)
if getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS'):
    # If running as a PyInstaller bundle, use _MEIPASS to locate templates and static folders
    template_dir = os.path.join(sys._MEIPASS, 'templates')
    static_dir = os.path.join(sys._MEIPASS, 'static')
    app = Flask(__name__, template_folder=template_dir, static_folder=static_dir)
else:
    # Normal environment, default template and static folder
    app = Flask(__name__, template_folder='templates')  # Changed to 'templates' folder to match Flask convention

# Route to render the main page
@app.route('/')
def index():
    return render_template('index2.html')

# Route to run automation based on a dynamically loaded script
@app.route('/automation', methods=['POST'])
def run_automation():
    if request.method == 'POST':
        # Retrieve the script name from the form
        search_key = request.form.get('script_name')

        if not search_key:
            return 'No script name provided', 400

        # Validate the script name to ensure it is a valid Python identifier
        if not search_key.isidentifier():
            return 'Invalid script name', 400

        # Dynamically load the script module and function
        module_name = f'scripts.{search_key}'
        func_name = f'selenium_code_{search_key}'

        try:
            # Attempt to import the module dynamically
            print(f"Attempting to import module: {module_name}")  # Debug
            script_module = importlib.import_module(module_name)

            # Check if the function exists in the module
            if hasattr(script_module, func_name):
                func = getattr(script_module, func_name)
                print(f"Calling function: {func_name}")  # Debug
                result = func()  # Execute the function
            else:
                return 'Function not found in script', 404

        except ModuleNotFoundError as e:
            return f'Script not found: {e}', 404
        except Exception as e:
            return f'An error occurred: {str(e)}', 500

        # Return the result from the script
        return result

    return 'Method not allowed', 405

# Route to run tests and generate a report
@app.route("/run-tests", methods=["GET"])
def run_tests():
    try:
        # Run a Selenium script or automation process
        report_data = selenium_code_script2()  # Replace this with your actual Selenium function call
        # Render the HTML report using a template
        return render_template("Report.html", report_data=report_data)
    except Exception as e:
        return f"An error occurred while running the tests: {str(e)}", 500

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000, debug=True)





